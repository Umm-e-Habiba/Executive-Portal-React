{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Projects\\\\tobesendtobiba11apr23\\\\client\\\\src\\\\pages\\\\khyberCity\\\\Customers\\\\CustomersOverview.js\";\n\nimport React from \"react\";\nimport Chart from 'react-apexcharts';\nimport { Row, Col, Card, CardBody, Progress, UncontrolledTooltip, Input } from \"reactstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\";\nimport axios from \"axios\";\nimport Preloader from \"../../../components/Preloader\";\nvar customerColumns = [{\n  dataField: \"ID\",\n  text: \"ID\",\n  sort: true,\n  hidden: true\n}, {\n  dataField: \"MembershipNumber\",\n  text: \"Membership #\",\n  sort: true\n}, {\n  dataField: \"CustomerName\",\n  text: \"Name\",\n  sort: false\n}, {\n  dataField: \"ContactNumber\",\n  text: \"Contact\",\n  sort: false\n}, {\n  dataField: \"Address\",\n  text: \"Address\",\n  sort: false\n}, {\n  dataField: \"RecoveryPercentage\",\n  text: \"Overall Recovery\",\n  formatter: function formatter(cell, row, rowIndex, extraData) {\n    var _row$RecoveryPercenta;\n\n    var recoveryPercentage = (_row$RecoveryPercenta = row.RecoveryPercentage) !== null && _row$RecoveryPercenta !== void 0 ? _row$RecoveryPercenta : 100.00;\n    var color = recoveryPercentage > 80 ? \"success\" : recoveryPercentage > 50 ? \"info\" : recoveryPercentage > 30 ? \"warning\" : \"danger\";\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(Progress, {\n      id: \"progress-overall-recovery-\".concat(row.ID),\n      color: color,\n      value: recoveryPercentage,\n      className: \"progress-xl\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: \"bottom\",\n      id: \"tooltip-overall-recovery-\".concat(row.ID),\n      target: \"progress-overall-recovery-\".concat(row.ID),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, \"\".concat(recoveryPercentage.toFixed(2), \"%\")));\n  },\n  sort: false\n}];\n\nvar CustomersTable = function CustomersTable(props) {\n  var SearchBar = Search.SearchBar;\n  var ExportCSVButton = CSVExport.ExportCSVButton;\n  var customers = props.customers,\n      columns = props.columns;\n  return /*#__PURE__*/React.createElement(ToolkitProvider, {\n    bootstrap4: true,\n    keyField: \"RowNumber\",\n    data: customers,\n    columns: columns,\n    search: true,\n    exportCSV: {\n      onlyExportFiltered: true,\n      exportAll: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }\n  }, function (props) {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, Object.assign({}, props.searchProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      className: \"text-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ExportCSVButton, Object.assign({}, props.csvProps, {\n      className: \"btn btn-primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }), \"Export CSV\"))), /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({}, props.baseProps, {\n      pagination: paginationFactory({\n        paginationSize: 5,\n        pageStartIndex: 1,\n        firstPageText: \"First\",\n        prePageText: \"Back\",\n        nextPageText: \"Next\",\n        lastPageText: \"Last\",\n        nextPageTitle: \"First page\",\n        prePageTitle: \"Pre page\",\n        firstPageTitle: \"Next page\",\n        lastPageTitle: \"Last page\",\n        showTotal: true,\n        paginationTotalRenderer: function paginationTotalRenderer(from, to, size) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            className: \"react-bootstrap-table-pagination-total ml-4\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }\n          }, \"Showing \", from.toLocaleString(), \" to \", to.toLocaleString(), \" of \", size.toLocaleString(), \" Results\");\n        },\n        sizePerPageRenderer: function sizePerPageRenderer(_ref) {\n          var options = _ref.options,\n              currentSizePerPage = _ref.currSizePerPage,\n              onSizePerPageChange = _ref.onSizePerPageChange;\n          return /*#__PURE__*/React.createElement(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            className: \"d-inline mr-1\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 41\n            }\n          }, \"Show\"), /*#__PURE__*/React.createElement(Input, {\n            type: \"select\",\n            name: \"select\",\n            id: \"no-entries\",\n            className: \"custom-select custom-select-sm d-inline col-1\",\n            defaultValue: currentSizePerPage,\n            onChange: function onChange(event) {\n              return onSizePerPageChange(event.target.value);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 41\n            }\n          }, options.map(function (option, index) {\n            return /*#__PURE__*/React.createElement(\"option\", {\n              key: index,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 60\n              }\n            }, option.text);\n          })), /*#__PURE__*/React.createElement(\"label\", {\n            className: \"d-inline ml-1\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 41\n            }\n          }, \"entries\"));\n        },\n        sizePerPageList: [{\n          text: \"10\",\n          value: 10\n        }, {\n          text: \"20\",\n          value: 20\n        }, {\n          text: \"30\",\n          value: 30\n        }, {\n          text: \"40\",\n          value: 40\n        }]\n      }),\n      wrapperClasses: \"table-responsive\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    })));\n  });\n};\n\nvar CustomersOverview = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomersOverview, _React$Component);\n\n  var _super = _createSuper(CustomersOverview);\n\n  function CustomersOverview(props) {\n    var _this2;\n\n    _classCallCheck(this, CustomersOverview);\n\n    _this2 = _super.call(this, props);\n    _this2.state = {\n      IsDataFetched: false,\n      IsDataFound: false,\n      Customers: [],\n      CustomerTypes: []\n    };\n    return _this2;\n  }\n\n  _createClass(CustomersOverview, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get(\"\".concat(process.env.REACT_APP_SERVER_URL, \"/khyberCity/customers\"));\n\n              case 3:\n                response = _context.sent;\n                this.setState({\n                  IsDataFetched: true\n                });\n\n                if (response.data.Message === \"Data found.\") {\n                  this.setState({\n                    IsDataFound: true,\n                    Customers: response.data.Customers,\n                    CustomerTypes: response.data.CustomerTypes\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                this.setState({\n                  IsDataFetched: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          IsDataFetched = _this$state.IsDataFetched,\n          IsDataFound = _this$state.IsDataFound,\n          Customers = _this$state.Customers,\n          CustomerTypes = _this$state.CustomerTypes;\n      return IsDataFound ? /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }\n      }, Customers.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"card-title header-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 33\n        }\n      }, \"All Customers\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-info ml-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 50\n        }\n      }, Customers.length.toLocaleString())), /*#__PURE__*/React.createElement(CustomersTable, {\n        columns: customerColumns,\n        customers: Customers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"card-title header-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 33\n        }\n      }, \"Customers Statistics\"), /*#__PURE__*/React.createElement(Chart, {\n        options: {\n          chart: {\n            height: 400,\n            type: 'pie'\n          },\n          colors: CustomerTypes.map(function (item) {\n            return item.Color;\n          }),\n          labels: CustomerTypes.map(function (item) {\n            return item.Name;\n          }),\n          tooltip: {\n            theme: 'dark',\n            x: {\n              show: false\n            },\n            y: {\n              show: true,\n              formatter: function formatter(value) {\n                return \"\".concat(value.toLocaleString(), \" Customers\");\n              }\n            }\n          },\n          legend: {\n            show: true,\n            position: 'bottom',\n            horizontalAlign: 'center',\n            verticalAlign: 'middle',\n            floating: false,\n            fontSize: '14px',\n            offsetX: 0,\n            offsetY: -10\n          },\n          responsive: [{\n            breakpoint: 600,\n            options: {\n              chart: {\n                height: 240\n              },\n              legend: {\n                show: false\n              }\n            }\n          }]\n        },\n        series: CustomerTypes.map(function (item) {\n          return item.Count;\n        }),\n        type: \"pie\",\n        height: 400,\n        className: \"apex-charts\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 33\n        }\n      }))))) : /*#__PURE__*/React.createElement(Preloader, {\n        isDataFetched: IsDataFetched,\n        retryLink: \"/khyberCity/customers\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return CustomersOverview;\n}(React.Component);\n\n;\nexport default CustomersOverview;","map":{"version":3,"sources":["E:/Projects/tobesendtobiba11apr23/client/src/pages/khyberCity/Customers/CustomersOverview.js"],"names":["React","Chart","Row","Col","Card","CardBody","Progress","UncontrolledTooltip","Input","BootstrapTable","paginationFactory","ToolkitProvider","Search","CSVExport","axios","Preloader","customerColumns","dataField","text","sort","hidden","formatter","cell","row","rowIndex","extraData","recoveryPercentage","RecoveryPercentage","color","ID","toFixed","CustomersTable","props","SearchBar","ExportCSVButton","customers","columns","onlyExportFiltered","exportAll","searchProps","csvProps","baseProps","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","from","to","size","toLocaleString","sizePerPageRenderer","options","currentSizePerPage","currSizePerPage","onSizePerPageChange","event","target","value","map","option","index","sizePerPageList","CustomersOverview","state","IsDataFetched","IsDataFound","Customers","CustomerTypes","get","process","env","REACT_APP_SERVER_URL","response","setState","data","Message","length","chart","height","type","colors","item","Color","labels","Name","tooltip","theme","x","show","y","legend","position","horizontalAlign","verticalAlign","floating","fontSize","offsetX","offsetY","responsive","breakpoint","Count","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Chart from 'react-apexcharts';\r\n\r\nimport { \r\n    Row, Col, Card, CardBody, \r\n    Progress, UncontrolledTooltip, Input} from \"reactstrap\";\r\n\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport Preloader from \"../../../components/Preloader\";\r\n\r\nconst customerColumns = [\r\n    {\r\n        dataField: \"ID\",\r\n        text: \"ID\",\r\n        sort: true,\r\n        hidden: true\r\n    },\r\n    {\r\n        dataField: \"MembershipNumber\",\r\n        text: \"Membership #\",\r\n        sort: true,\r\n    },\r\n    {\r\n        dataField: \"CustomerName\",\r\n        text: \"Name\",\r\n        sort: false,\r\n    },\r\n    {\r\n        dataField: \"ContactNumber\",\r\n        text: \"Contact\",\r\n        sort: false,\r\n    },\r\n    {\r\n        dataField: \"Address\",\r\n        text: \"Address\",\r\n        sort: false,\r\n    },\r\n    {\r\n        dataField: \"RecoveryPercentage\",\r\n        text: \"Overall Recovery\",\r\n        formatter: (cell, row, rowIndex, extraData) => {\r\n            const recoveryPercentage = row.RecoveryPercentage ?? 100.00;\r\n\r\n            const color = recoveryPercentage > 80 ? \"success\" : \r\n                (recoveryPercentage > 50 ? \"info\" :\r\n                (recoveryPercentage > 30 ? \"warning\" : \"danger\"));\r\n\r\n            return <React.Fragment>\r\n                    <Progress id={`progress-overall-recovery-${row.ID}`} \r\n                        color={color} value={recoveryPercentage} className=\"progress-xl\" />\r\n\r\n                    <UncontrolledTooltip\r\n                        placement=\"bottom\"\r\n                        id={`tooltip-overall-recovery-${row.ID}`}\r\n                        target={`progress-overall-recovery-${row.ID}`} >{`${recoveryPercentage.toFixed(2)}%`}</UncontrolledTooltip>\r\n                </React.Fragment>;\r\n        },\r\n        sort: false,\r\n    },\r\n];\r\n\r\nconst CustomersTable = (props) => {\r\n    const { SearchBar } = Search;\r\n    const { ExportCSVButton } = CSVExport;\r\n\r\n    const {\r\n        customers,\r\n        columns,\r\n    } = props;\r\n\r\n    return <ToolkitProvider\r\n                bootstrap4\r\n                keyField=\"RowNumber\"\r\n                data={customers}\r\n                columns={columns}\r\n                search\r\n                exportCSV={{ onlyExportFiltered: true, exportAll: false }}>\r\n                {props => (\r\n                    <React.Fragment>\r\n                        <Row>\r\n                            <Col>\r\n                                <SearchBar {...props.searchProps} />\r\n                            </Col>\r\n                            <Col className=\"text-right\">\r\n                                <ExportCSVButton {...props.csvProps} className=\"btn btn-primary\">\r\n                                    Export CSV\r\n                                </ExportCSVButton>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <BootstrapTable\r\n                            {...props.baseProps}\r\n                            pagination={paginationFactory({\r\n                                paginationSize: 5,\r\n                                pageStartIndex: 1,\r\n                                firstPageText: \"First\",\r\n                                prePageText: \"Back\",\r\n                                nextPageText: \"Next\",\r\n                                lastPageText: \"Last\",\r\n                                nextPageTitle: \"First page\",\r\n                                prePageTitle: \"Pre page\",\r\n                                firstPageTitle: \"Next page\",\r\n                                lastPageTitle: \"Last page\",\r\n                                showTotal: true,\r\n                                paginationTotalRenderer: (from, to, size) => (\r\n                                    <span className=\"react-bootstrap-table-pagination-total ml-4\">\r\n                                        Showing {from.toLocaleString()} to {to.toLocaleString()} of {size.toLocaleString()} Results\r\n                                    </span>\r\n                                ),\r\n                                sizePerPageRenderer: ({ options, currSizePerPage: currentSizePerPage, onSizePerPageChange }) => (\r\n                                    <React.Fragment>\r\n                                        <label className=\"d-inline mr-1\">Show</label>\r\n\r\n                                        <Input type=\"select\" name=\"select\" id=\"no-entries\" \r\n                                            className=\"custom-select custom-select-sm d-inline col-1\"\r\n                                            defaultValue={currentSizePerPage}\r\n                                            onChange={(event) => onSizePerPageChange(event.target.value)}>\r\n                                                {options.map((option, index) => {\r\n                                                    return <option key={index}>{option.text}</option>\r\n                                                })}\r\n                                        </Input>\r\n\r\n                                        <label className=\"d-inline ml-1\">entries</label>\r\n                                    </React.Fragment>\r\n                                ),\r\n                                sizePerPageList: [\r\n                                    {\r\n                                        text: \"10\",\r\n                                        value: 10,\r\n                                    },\r\n                                    {\r\n                                        text: \"20\",\r\n                                        value: 20,\r\n                                    },\r\n                                    {\r\n                                        text: \"30\",\r\n                                        value: 30,\r\n                                    },\r\n                                    {\r\n                                        text: \"40\",\r\n                                        value: 40,\r\n                                    },\r\n                                ],\r\n                            })}\r\n                            wrapperClasses=\"table-responsive\"\r\n                        />\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>;\r\n};\r\n\r\nclass CustomersOverview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            IsDataFetched: false,\r\n            IsDataFound: false,\r\n            Customers: [],\r\n            CustomerTypes: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const response = await axios.get(`${process.env.REACT_APP_SERVER_URL}/khyberCity/customers`);\r\n\r\n            this.setState({\r\n                IsDataFetched: true,\r\n            });\r\n\r\n              if (response.data.Message === \"Data found.\") {\r\n                  this.setState({\r\n                      IsDataFound: true,\r\n                      Customers: response.data.Customers,\r\n                      CustomerTypes: response.data.CustomerTypes,\r\n                    });\r\n              }\r\n          } catch (error) {\r\n            this.setState({\r\n                IsDataFetched: true,\r\n            });\r\n          }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            IsDataFetched,\r\n            IsDataFound,\r\n            Customers,\r\n            CustomerTypes,\r\n        } = this.state;\r\n\r\n        return IsDataFound ? \r\n            <React.Fragment>\r\n                {Customers.length > 0 &&\r\n                    <React.Fragment>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <h5 className=\"card-title header-title\">\r\n                                    All Customers<span className=\"badge badge-info ml-2\">{Customers.length.toLocaleString()}</span>\r\n                                </h5>\r\n\r\n                                <CustomersTable\r\n                                    columns={customerColumns}\r\n                                    customers={Customers} />\r\n                            </CardBody>\r\n                        </Card>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <h5 className=\"card-title header-title\">Customers Statistics</h5>\r\n                                \r\n                                <Chart options={{\r\n                                    chart: {\r\n                                        height: 400,\r\n                                        type: 'pie',\r\n                                    },\r\n                                    colors: CustomerTypes.map(item => item.Color),\r\n                                    labels: CustomerTypes.map(item => item.Name),\r\n                                    tooltip: {\r\n                                        theme: 'dark',\r\n                                        x: { show: false },\r\n                                        y: { \r\n                                            show: true,\r\n                                            formatter: function (value) {\r\n                                                return `${(value).toLocaleString()} Customers`\r\n                                            } \r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        show: true,\r\n                                        position: 'bottom',\r\n                                        horizontalAlign: 'center',\r\n                                        verticalAlign: 'middle',\r\n                                        floating: false,\r\n                                        fontSize: '14px',\r\n                                        offsetX: 0,\r\n                                        offsetY: -10,\r\n                                    },\r\n                                    responsive: [\r\n                                        {\r\n                                            breakpoint: 600,\r\n                                            options: {\r\n                                                chart: {\r\n                                                    height: 240,\r\n                                                },\r\n                                                legend: {\r\n                                                    show: false,\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                    ],\r\n                                }} \r\n                                series={CustomerTypes.map(item => item.Count)} type=\"pie\" height={400} className=\"apex-charts\" />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </React.Fragment>}\r\n            </React.Fragment> : \r\n            <Preloader\r\n                isDataFetched={IsDataFetched}\r\n                retryLink={\"/khyberCity/customers\"} />;\r\n    }\r\n};\r\n\r\nexport default CustomersOverview;"]},"metadata":{},"sourceType":"module"}