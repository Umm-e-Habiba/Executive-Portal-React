{"version":3,"sources":["components/StatisticsChartWidget2.js","pages/khyberCity/Sales/Sales.js","components/PageTitle.js","components/Preloader.js","assets/images/fetch-failed.svg","assets/images/searching.svg"],"names":["StatisticsChartWidget2","props","options","chart","sparkline","enabled","stroke","width","curve","yaxis","min","max","ymax","labels","formatter","val","parseInt","toLocaleString","colors","title","text","offsetX","offsetY","style","fontSize","subtitle","type","series","name","data","Card","CardBody","className","height","Sales","onFilter","state","NewBookings","Installments","DateRange","length","filteredBookings","Amounts","Counts","filteredInstallments","fromTimestamp","Date","getTime","toTimestamp","count","i","amount","setState","FilteredBookings","FilteredInstallments","oneWeekAgo","setDate","getDate","IsDataFetched","IsDataFound","SalesCards","DailyClosing","bind","a","axios","get","process","response","this","Message","Fragment","Row","Col","md","PageTitle","breadCrumbItems","label","path","active","map","salesCard","index","key","xl","TotalAmount","Count","Name","Color","Math","Form","inline","FormGroup","value","onChange","date","mode","onClick","year","month","day","id","group","dataLabels","xaxis","minWidth","tooltip","x","format","stacked","NewBookingAmounts","InstallmentAmounts","OtherTransactionAmounts","OnlineTransferAmounts","ExpensesAmounts","CashInHandAmounts","PlotTransferAmounts","Preloader","isDataFetched","retryLink","React","Component","items","to","item","document","body","classList","add","remove","lg","src","FetchFailedSVG","alt","window","location","reload","SearchingSVG","color","size","module","exports"],"mappings":"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","file":"static/js/26.61c0681a.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport Chart from 'react-apexcharts';\n\n\n/**\n * Renders the chart in widget area\n */\nconst StatisticsChartWidget2 = (props) => {\n    // default options\n    const options = {\n        chart: {\n            sparkline: {\n                enabled: true,\n            },\n        },\n        stroke: {\n            width: 2,\n            curve: 'smooth',\n        },\n        yaxis: {\n            min: 0,\n            max: props.ymax + 50,\n            labels: {\n                formatter: function (val) {\n                  return `Rs. ${(parseInt(val)).toLocaleString()}`;\n                },\n              }\n        },\n        colors: props.colors || ['#008FFB'],\n        title: {\n            text: props.title,\n            offsetX: 10,\n            offsetY: 10,\n            style: {\n                fontSize: '24px',\n            },\n        },\n        subtitle: {\n            text: props.subtitle,\n            offsetX: 10,\n            offsetY: 45,\n            style: {\n                fontSize: '14px',\n            },\n        },\n    };\n\n    // type - defaulted to bar\n    const type = props.type || 'bar';\n\n    // data\n    const series = [{ name: props.name || 'Data', data: props.data || [] }];\n\n    return (\n        <Card>\n            <CardBody className=\"p-0\">\n                <Chart className=\"apex-charts\" options={options} series={series} type={type} height={172} />\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default StatisticsChartWidget2;\n","import React from \"react\";\nimport { Row, Col, Card, CardBody, Form, FormGroup } from \"reactstrap\";\nimport axios from \"axios\";\nimport Flatpickr from \"react-flatpickr\";\nimport Chart from 'react-apexcharts';\n\nimport PageTitle from '../../../components/PageTitle';\nimport StatisticsChartWidget2 from '../../../components/StatisticsChartWidget2';\nimport Preloader from \"../../../components/Preloader\";\n\nclass Sales extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 365);\n\n        this.state = {\n            IsDataFetched: false,\n            IsDataFound: false,\n            SalesCards: [],\n            NewBookings: {\n                Amounts: [],\n                Counts: [],\n            },\n            Installments: {\n                Amounts: [],\n                Counts: [],\n            },\n            FilteredBookings: {\n                Amounts: [],\n                Counts: [],\n            },\n            FilteredInstallments: {\n                Amounts: [],\n                Counts: [],\n            }, \n            DailyClosing: {},\n            DateRange: [oneWeekAgo, new Date()]\n        };\n\n        this.onFilter = this.onFilter.bind(this);\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await axios.get(`${process.env.REACT_APP_SERVER_URL}/khyberCity/sales`);\n\n            this.setState({\n                IsDataFetched: true,\n            });\n\n              if (response.data.Message === \"Data found.\") {\n                  this.setState({\n                      IsDataFound: true,\n                      SalesCards: response.data.SalesCards,\n                      NewBookings: response.data.NewBookings,\n                      Installments: response.data.Installments,\n                      DailyClosing: response.data.DailyClosing,\n                  });\n\n                  this.onFilter();\n              }\n          } catch (error) {\n            this.setState({\n                IsDataFetched: true,\n            });\n          }\n    }\n\n    onFilter = () => {\n        let { \n            NewBookings,\n            Installments,\n            DateRange,\n        } = this.state;\n\n        if (DateRange.length !== 2) {\n            return;\n        }\n\n        let filteredBookings = {\n            Amounts: [],\n            Counts: [],\n        };\n\n        let filteredInstallments = {\n            Amounts: [],\n            Counts: [],\n        };\n\n        const fromTimestamp = new Date(DateRange[0]).getTime();\n        const toTimestamp = new Date(DateRange[1]).getTime();\n        \n        let count = 0;\n        let length = NewBookings.Amounts.length;\n\n        for (let i = 0; i < length; i++) {\n            const amount = NewBookings.Amounts[i];\n\n            if (amount[0] >= fromTimestamp &&\n                amount[0] <= toTimestamp) {\n                    filteredBookings.Amounts[count] = NewBookings.Amounts[i];\n                    filteredBookings.Counts[count++] = NewBookings.Counts[i];\n                }\n        }\n\n        count = 0;\n        length = Installments.Amounts.length;\n\n        for (let i = 0; i < length; i++) {\n            const amount = Installments.Amounts[i];\n\n            if (amount[0] >= fromTimestamp &&\n                amount[0] <= toTimestamp) {\n                    filteredInstallments.Amounts[count] = Installments.Amounts[i];\n                    filteredInstallments.Counts[count++] = Installments.Counts[i];\n                }\n        }\n\n        this.setState({\n            FilteredBookings: filteredBookings,\n            FilteredInstallments: filteredInstallments,\n        });\n    }\n\n    render() {\n        const {\n            IsDataFetched,\n            IsDataFound, \n            SalesCards,\n            NewBookings,\n            Installments,\n            DailyClosing,\n            FilteredBookings,\n            FilteredInstallments,\n            DateRange,\n        } = this.state;\n\n        return IsDataFound ? \n            <React.Fragment>\n                <Row className=\"page-title\">\n                    <Col md={12}>\n                        <PageTitle\n                            breadCrumbItems={[\n                                { label: 'Khyber City', path: '/khyberCity/sales' },\n                                { label: 'Sales', path: '/khyberCity', active: true },\n                            ]}\n                            title={\"Sales\"}\n                        />\n                    </Col>\n                </Row>\n    \n                <h6>THIS MONTH STATISTICS</h6>\n    \n                <Row>\n                    {SalesCards.map((salesCard, index) =>\n                        <Col key={index} md={6} xl={3}>\n                            <StatisticsChartWidget2\n                                name=\"Amount\"\n                                type=\"area\"\n                                title={`Rs. ${(salesCard.TotalAmount).toLocaleString()}`}\n                                subtitle={`${salesCard.Count} ${salesCard.Name}`}\n                                colors={[salesCard.Color]}\n                                ymax={Math.max(...salesCard.Amounts)}\n                                data={salesCard.Amounts}>\n                            </StatisticsChartWidget2>\n                        </Col>\n                    )}\n                </Row>\n                \n                <Card>\n                    <CardBody>\n                        <h5 className=\"card-title header-title\">Select Date Range</h5>\n\n                        <Form inline>\n                            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                                <Flatpickr value={DateRange}\n                                    onChange={date => { \n                                        this.setState({ DateRange: date });\n                                    }} \n                                    options={{ \n                                        mode: \"range\" \n                                    }}\n                                    className=\"form-control\" />\n                            </FormGroup>\n\n                            <div className=\"btn-group ml-1\">\n                                <button type=\"button\" className=\"btn btn-secondary\"\n                                    onClick={this.onFilter}>Filter</button>\n                                <button type=\"button\" className=\"btn btn-white\"\n                                    onClick={() => {\n                                        this.setState({\n                                            FilteredBookings: NewBookings,\n                                            FilteredInstallments: Installments\n                                        });\n                                    }}>All</button>\n                            </div>\n                        </Form>\n                    </CardBody>\n                </Card>\n\n                <h6>\n                    {\"Selected Range: \"} \n                    <span className=\"text-info\">{new Date(DateRange[0]).toLocaleString(\"default\", { year: \"numeric\", month: \"long\", day: \"numeric\" })}</span>\n                    <span className=\"fas fa-arrow-right mx-1\"/>\n                    <span className=\"text-info\">{new Date(DateRange[1]).toLocaleString(\"default\", { year: \"numeric\", month: \"long\", day: \"numeric\" })}</span>\n                </h6>\n\n                <Card>\n                    <CardBody className=\"pb-0\">\n                        <h5 className=\"card-title mb-0 header-title\">\n                            Plot Bookings<span className={`font-size-12 badge badge-info ml-2`}>{FilteredBookings.Amounts.length.toLocaleString()}</span>\n                        </h5>\n\n                        <div id=\"-new-bookings-charts-wrapper\">\n                            <div id=\"new-bookings-chart-line\">\n                                <Chart\n                                    options={{\n                                        chart: {\n                                            group: \"new-bookings\",\n                                            type: 'line',\n                                            height: 160,\n                                        },\n                                        dataLabels: {\n                                            enabled: false\n                                        },\n                                        colors: [\"#43D39E\"],\n                                        xaxis: {\n                                            type: 'datetime',\n                                        },\n                                        yaxis: {\n                                            title: {\n                                                text: \"Number of Bookings\",\n                                            },\n                                            labels: {\n                                                minWidth: 80,\n                                                formatter: function (val) {\n                                                    return `${(parseInt(val)).toLocaleString()}`;\n                                                },\n                                            },\n                                            tooltip: {\n                                                x: {\n                                                    format: 'dd MMM yyyy'\n                                                }\n                                            }\n                                        },\n                                    }}\n                                    series={[\n                                        {\n                                            name: \"Number of Bookings\",\n                                            data: FilteredBookings.Counts\n                                        }\n                                    ]}\n                                    type=\"line\"\n                                    className=\"apex-charts mt-3\"\n                                    height={160} />\n                            </div>\n                            <div id=\"new-bookings-chart-area\">\n                                <Chart \n                                    options={{\n                                        chart: {\n                                            group: \"new-bookings\",\n                                            type: 'area',\n                                            height: 300,\n                                        },\n                                        dataLabels: {\n                                            enabled: false\n                                        },\n                                        colors: [\"#25C2E3\"],\n                                        xaxis: {\n                                            type: 'datetime',\n                                            title: {\n                                                text: \"Booking Dates\",\n                                            }\n                                        },\n                                        yaxis: {\n                                            title: {\n                                                text: \"Booking Amounts\",\n                                            },\n                                            labels: {\n                                                minWidth: 80,\n                                                formatter: function (val) {\n                                                    return `Rs. ${(parseInt(val)).toLocaleString()}`;\n                                                },\n                                            }\n                                        },\n                                        tooltip: {\n                                            x: {\n                                                format: 'dd MMM yyyy'\n                                            }\n                                        }\n                                    }}\n                                    series={[\n                                        {\n                                            name: \"Amount\",\n                                            data: FilteredBookings.Amounts\n                                        }\n                                    ]}\n                                    type=\"area\"\n                                    className=\"apex-charts mt-3\"\n                                    height={200} />\n                            </div>\n                        </div>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardBody className=\"pb-0\">\n                        <h5 className=\"card-title mb-0 header-title\">\n                            Installments<span className={`font-size-12 badge badge-info ml-2`}>{FilteredInstallments.Amounts.length.toLocaleString()}</span>\n                        </h5>\n\n                        <div id=\"installments-charts-wrapper\">\n                            <div id=\"installments-chart-line\">\n                                <Chart\n                                    options={{\n                                        chart: {\n                                            group: \"installments\",\n                                            type: 'line',\n                                            height: 200,\n                                        },\n                                        dataLabels: {\n                                            enabled: false\n                                        },\n                                        colors: [\"#FFBE0B\"],\n                                        xaxis: {\n                                            type: 'datetime',\n                                        },\n                                        yaxis: {\n                                            title: {\n                                                text: \"Number of Installments\",\n                                            },\n                                            labels: {\n                                                minWidth: 80,\n                                                formatter: function (val) {\n                                                    return `${(parseInt(val)).toLocaleString()}`;\n                                                },\n                                            },\n                                            tooltip: {\n                                                x: {\n                                                    format: 'dd MMM yyyy'\n                                                }\n                                            }\n                                        },\n                                    }}\n                                    series={[\n                                        {\n                                            name: \"Number of Installments\",\n                                            data: FilteredInstallments.Counts\n                                        },\n                                    ]}\n                                    type=\"line\"\n                                    className=\"apex-charts mt-3\"\n                                    height={200} />\n                            </div>\n                            <div id=\"installments-chart-area\">\n                                <Chart \n                                    options={{\n                                        chart: {\n                                            group: \"installments\",\n                                            type: 'area',\n                                            height: 300,\n                                        },\n                                        dataLabels: {\n                                            enabled: false\n                                        },\n                                        colors: [\"#5369F8\"],\n                                        xaxis: {\n                                            type: 'datetime',\n                                            title: {\n                                                text: \"Installment Dates\",\n                                            }\n                                        },\n                                        yaxis: {\n                                            title: {\n                                                text: \"Installments Amounts\",\n                                            },\n                                            labels: {\n                                                minWidth: 80,\n                                                formatter: function (val) {\n                                                    return `Rs. ${(parseInt(val)).toLocaleString()}`;\n                                                },\n                                            }\n                                        },\n                                        tooltip: {\n                                            x: {\n                                                format: 'dd MMM yyyy'\n                                            }\n                                        }\n                                    }}\n                                    series={[\n                                        {\n                                            name: \"Amount\",\n                                            data: FilteredInstallments.Amounts\n                                        }\n                                    ]}\n                                    type=\"area\"\n                                    className=\"apex-charts mt-3\"\n                                    height={200} />\n                            </div>\n                        </div>\n                    </CardBody>\n                </Card>\n\n                <Card>\n                    <CardBody className=\"pb-0\">\n                        <h5 className=\"card-title mb-0 header-title\">Daily Closing Statistics</h5>\n\n                            <Chart\n                                options={{\n                                    chart: {\n                                        type: \"bar\",\n                                        stacked: true,\n                                        height: 600,\n                                    },\n                                    dataLabels: {\n                                        enabled: false\n                                    },\n                                    colors: [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\", \"#A493DF\", \"#DF93A4\"],\n                                    xaxis: {\n                                        type: 'datetime',\n                                        title: {\n                                            text: \"Dates\",\n                                        },\n                                    },\n                                    yaxis: {\n                                        title: {\n                                            text: \"Amounts\",\n                                        },\n                                        labels: {\n                                            minWidth: 80,\n                                            formatter: function (val) {\n                                                return `Rs. ${(parseInt(val)).toLocaleString()}`;\n                                            },\n                                        },\n                                        tooltip: {\n                                            x: {\n                                                format: 'dd MMM yyyy'\n                                            }\n                                        }\n                                    },\n                                }}\n                                series={[\n                                    {\n                                        name: \"New Bookings\",\n                                        data: DailyClosing.NewBookingAmounts,\n                                    },\n                                    {\n                                        name: \"Installments\",\n                                        data: DailyClosing.InstallmentAmounts,\n                                    },\n                                    {\n                                        name: \"Other Transactions\",\n                                        data: DailyClosing.OtherTransactionAmounts,\n                                    },\n                                    {\n                                        name: \"Online Transfers\",\n                                        data: DailyClosing.OnlineTransferAmounts,\n                                    },\n                                    {\n                                        name: \"Expenses\",\n                                        data: DailyClosing.ExpensesAmounts,\n                                    },\n                                    {\n                                        name: \"Cash in Hand\",\n                                        data: DailyClosing.CashInHandAmounts,\n                                    },\n                                    {\n                                        name: \"Plot Transfers\",\n                                        data: DailyClosing.PlotTransferAmounts,\n                                    },\n                                ]}\n                                type=\"bar\"\n                                className=\"apex-charts mt-3\"\n                                height={600} />\n                    </CardBody>\n                </Card>\n            </React.Fragment> :\n            <Preloader \n                isDataFetched={IsDataFetched}\n                retryLink={\"/khyberCity/sales\"} />;\n    }\n};\n\nexport default Sales;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\n/**\n * Renders the PageTitle\n */\nconst PageTitle = (props) => {\n    const title = props.title || \"\";\n    const items = props.breadCrumbItems || \"\";\n    return (\n        <React.Fragment>\n            \n            <Breadcrumb className=\"float-right mt-1 font-size-14\">\n                <BreadcrumbItem>\n                    <Link to=\"/\">Attari Admin</Link>\n                </BreadcrumbItem>\n                {items.map((item, index) => {\n                    return item.active ? (\n                        <BreadcrumbItem active key={index}>\n                            {item.label}\n                        </BreadcrumbItem>\n                    ) : (\n                            <BreadcrumbItem key={index}>\n                                <Link to={item.path}>{item.label}</Link>\n                            </BreadcrumbItem>\n                        );\n                })}\n            </Breadcrumb>\n\n            <h4 className=\"mb-1 mt-0\">{title}</h4>\n        </React.Fragment>\n    )\n}\n\nexport default PageTitle;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Row, Col, Spinner, Button } from \"reactstrap\";\r\n\r\nimport FetchFailedSVG from \"../assets/images/fetch-failed.svg\";\r\nimport SearchingSVG from \"../assets/images/searching.svg\";\r\n\r\nconst colors = ['primary', 'primary', 'primary' ];\r\n\r\nclass Preloader extends Component {\r\n    constructor (props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.classList.add(\"authentication-bg\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.classList.remove(\"authentication-bg\");\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            isDataFetched,\r\n            retryLink,\r\n        } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"my-5\">\r\n                    <Container>\r\n                        {isDataFetched ? \r\n                            <div>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xl={4} lg={5}>\r\n                                        <div className=\"text-center\">\r\n                                            <div>\r\n                                                <img src={FetchFailedSVG} alt=\"\" className=\"img-fluid\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col className=\"text-center\">\r\n                                        <h3 className=\"mt-3\">Oops! Something went wrong.</h3>\r\n                                        <p className=\"text-muted mb-2\">Failed to fetch data from the server.<br /> Please try again!</p>\r\n                                        <Button className=\"btn btn-lg btn-primary mt-4\"\r\n                                            onClick={() => {\r\n                                                window.location.reload();\r\n                                            }}>Retry</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div> : \r\n                            <div>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xl={4} lg={5}>\r\n                                        <div className=\"text-center\">\r\n                                            <div>\r\n                                                <img src={SearchingSVG} alt=\"\" className=\"img-fluid\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col className=\"text-center\">\r\n                                        <h3 className=\"mt-3\">Loading</h3>\r\n                                        \r\n                                        <div>\r\n                                            {colors.map((color, index) => {\r\n                                                return <Spinner key={index} className=\"m-2\" size=\"sm\" type=\"grow\" color={color} />;\r\n                                            })}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>}\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preloader;","module.exports = __webpack_public_path__ + \"static/media/fetch-failed.d47b94a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/searching.fdf701a1.svg\";"],"sourceRoot":""}